{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u067e\u0627\u06cc\u062a\u0648\u0646 \u0628\u0631\u0627\u06cc \u0647\u0645\u0647","title":"\u067e\u0627\u06cc\u062a\u0648\u0646 \u0628\u0631\u0627\u06cc \u0647\u0645\u0647"},{"location":"#_1","text":"","title":"\u067e\u0627\u06cc\u062a\u0648\u0646 \u0628\u0631\u0627\u06cc \u0647\u0645\u0647"},{"location":"learning/","text":"\u0622\u0645\u0648\u0632\u0634 print","title":"Learning"},{"location":"learning/#_1","text":"print","title":"\u0622\u0645\u0648\u0632\u0634"},{"location":"learning/02-print/","text":"print simple print print ( \"Ahmad\" ) >>> Ahmad multi print print ( \"Ahmad\" , \"Ali\" , \"Akbar\" ) >>> Ahmad Ali Akbar Seprator print ( \"Ahmad\" , \"Ali\" , \"Akbar\" , sep = \" - \" ) >>> Ahmad - Ali - Akbar End print ( \"Ahmad\" , \"Ali\" , \"Akbar\" , sep = \" - \" , end = \"/\" ) >>> Ahmad - Ali - Akbar /","title":"print"},{"location":"learning/02-print/#print","text":"","title":"print"},{"location":"learning/02-print/#simple-print","text":"print ( \"Ahmad\" ) >>> Ahmad","title":"simple print"},{"location":"learning/02-print/#multi-print","text":"print ( \"Ahmad\" , \"Ali\" , \"Akbar\" ) >>> Ahmad Ali Akbar","title":"multi print"},{"location":"learning/02-print/#seprator","text":"print ( \"Ahmad\" , \"Ali\" , \"Akbar\" , sep = \" - \" ) >>> Ahmad - Ali - Akbar","title":"Seprator"},{"location":"learning/02-print/#end","text":"print ( \"Ahmad\" , \"Ali\" , \"Akbar\" , sep = \" - \" , end = \"/\" ) >>> Ahmad - Ali - Akbar /","title":"End"},{"location":"learning/03-string/","text":"string Upper upper case name = \"Apple\" print ( name . upper ()) output: APPLE Lower name = \"Apple\" print ( name . Lowwer ()) output: apple Title name = \"in the name of god\" print ( name . title ()) output: In The Name Of God Wrapping String name1 = \"Ahmad\" print ( name1 ) name2 = 'Ahmad' print ( name2 ) output: Ahmad Ahmad (r-l)strip() ... New Line print ( \"My name is \\n Ahmad\" ) output: My name is: Ahmad concatinate a = \"Hello\" b = \"World\" c = a + b print ( c ) output: HelloWorld a = \"Hello\" b = \"World\" c = a + \" \" + b print ( c ) output: Hello World Multi Line String a = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\"\" print ( a ) # or a = '''Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.''' print ( a )","title":"string"},{"location":"learning/03-string/#string","text":"","title":"string"},{"location":"learning/03-string/#upper","text":"upper case name = \"Apple\" print ( name . upper ()) output: APPLE","title":"Upper"},{"location":"learning/03-string/#lower","text":"name = \"Apple\" print ( name . Lowwer ()) output: apple","title":"Lower"},{"location":"learning/03-string/#title","text":"name = \"in the name of god\" print ( name . title ()) output: In The Name Of God","title":"Title"},{"location":"learning/03-string/#wrapping-string","text":"name1 = \"Ahmad\" print ( name1 ) name2 = 'Ahmad' print ( name2 ) output: Ahmad Ahmad","title":"Wrapping String"},{"location":"learning/03-string/#r-lstrip","text":"...","title":"(r-l)strip()"},{"location":"learning/03-string/#new-line","text":"print ( \"My name is \\n Ahmad\" ) output: My name is: Ahmad","title":"New Line"},{"location":"learning/03-string/#concatinate","text":"a = \"Hello\" b = \"World\" c = a + b print ( c ) output: HelloWorld a = \"Hello\" b = \"World\" c = a + \" \" + b print ( c ) output: Hello World","title":"concatinate"},{"location":"learning/03-string/#multi-line-string","text":"a = \"\"\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\"\" print ( a ) # or a = '''Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.''' print ( a )","title":"Multi Line String"},{"location":"learning/04-arithmatic-operator/","text":"arithmetical opertor a = 4 b = 5 print ( a + b ) print ( a - b ) print ( a * b ) print ( a / b ) output: 9 -1 20 0.8 Priority () and / and - point if same priority start from left print ( 2 * ( 4 + 3 ) ** 2 / 5 - 7 ) Error negativ in log print (( - 1 ) ** ( 1 / 2 )) #? \u200d divide by zero print ( 12 / 0 )","title":"arithmetical opertor"},{"location":"learning/04-arithmatic-operator/#arithmetical-opertor","text":"a = 4 b = 5 print ( a + b ) print ( a - b ) print ( a * b ) print ( a / b ) output: 9 -1 20 0.8","title":"arithmetical opertor"},{"location":"learning/04-arithmatic-operator/#priority","text":"() and / and -","title":"Priority"},{"location":"learning/04-arithmatic-operator/#point","text":"if same priority start from left print ( 2 * ( 4 + 3 ) ** 2 / 5 - 7 )","title":"point"},{"location":"learning/04-arithmatic-operator/#error","text":"negativ in log print (( - 1 ) ** ( 1 / 2 )) #? \u200d divide by zero print ( 12 / 0 )","title":"Error"},{"location":"learning/05-datatype/","text":"Data Types Primary DataType None Type name = None print ( name ) Type Convertion - Casting int -> float x = 12 print ( float ( x )) float -> int y = 43.2 print ( int ( y )) str -> int count = \"56\" print ( int ( count )) everything to str x = 12 y = 32.5 print ( str ( x )) print ( str ( y ))","title":"Data Types"},{"location":"learning/05-datatype/#data-types","text":"","title":"Data Types"},{"location":"learning/05-datatype/#primary-datatype","text":"","title":"Primary DataType"},{"location":"learning/05-datatype/#none-type","text":"name = None print ( name )","title":"None Type"},{"location":"learning/05-datatype/#type-convertion-casting","text":"","title":"Type Convertion - Casting"},{"location":"learning/05-datatype/#int-float","text":"x = 12 print ( float ( x ))","title":"int -&gt; float"},{"location":"learning/05-datatype/#float-int","text":"y = 43.2 print ( int ( y ))","title":"float -&gt; int"},{"location":"learning/05-datatype/#str-int","text":"count = \"56\" print ( int ( count ))","title":"str -&gt; int"},{"location":"learning/05-datatype/#everything-to-str","text":"x = 12 y = 32.5 print ( str ( x )) print ( str ( y ))","title":"everything to str"},{"location":"learning/10-condition/","text":"Condition Simple If statemnet if if 13 > 12 : print ( \"13 greater than 12\" ) Else statement if a > b : print ( \"a greater than b\" ) else : print ( \"b greater than a\" ) Else if statement ![[Pasted image 20221205235329.png]] if a >= 12 : print ( \"a greater than 12\" ) elif 12 > a >= 10 : print ( \"a between 12 and 10\" ) elif 10 > a >= 5 : print ( \"a between 10 and 5\" ) elif 5 > a : print ( \"a less than 5\" ) example","title":"Condition"},{"location":"learning/10-condition/#condition","text":"","title":"Condition"},{"location":"learning/10-condition/#simple-if-statemnet","text":"if if 13 > 12 : print ( \"13 greater than 12\" )","title":"Simple If statemnet"},{"location":"learning/10-condition/#else-statement","text":"if a > b : print ( \"a greater than b\" ) else : print ( \"b greater than a\" )","title":"Else statement"},{"location":"learning/10-condition/#else-if-statement","text":"![[Pasted image 20221205235329.png]] if a >= 12 : print ( \"a greater than 12\" ) elif 12 > a >= 10 : print ( \"a between 12 and 10\" ) elif 10 > a >= 5 : print ( \"a between 10 and 5\" ) elif 5 > a : print ( \"a less than 5\" ) example","title":"Else if statement"},{"location":"learning/11-variable/","text":"Variable naming _name = 2 . name = 2 2 name = 2 name2 = 2 #name = 2 name # = 2 reserved name programming words while for True False if else and or not prevented chars name % $ ^ & * ( - + # _ is magic _ = 12 __ = 12 _name = \"Ahmad\"","title":"Variable"},{"location":"learning/11-variable/#variable","text":"","title":"Variable"},{"location":"learning/11-variable/#naming","text":"","title":"naming"},{"location":"learning/11-variable/#_name-2-name-2-2name-2-name2-2-name-2-name-2","text":"","title":"_name = 2\n\n.name = 2\n\n2name = 2\n\nname2 = 2\n\n#name = 2\n\nname# = 2\n"},{"location":"learning/11-variable/#reserved-name","text":"programming words while for True False if else and or not","title":"reserved name"},{"location":"learning/11-variable/#prevented-chars","text":"","title":"prevented chars"},{"location":"learning/11-variable/#name-","text":"","title":"name % $ ^ &amp; * ( - + #\n"},{"location":"learning/11-variable/#_-is-magic","text":"_ = 12 __ = 12 _name = \"Ahmad\"","title":"_ is magic"},{"location":"learning/12-simple%20array/","text":"Array what's array? name1 = \"Ahmad\" name2 = \"Mohammad\" name3 = \"Ali\" name4 = \"blueberry\" Example names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] fruits = [ \"applae\" , \"orange\" , \"coconut\" , \"blueberry\" ] Print print ( names ) print ( fruits ) >>> [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] >>> [ \"applae\" , \"orange\" , \"coconut\" , \"blueberry\" ] Index names [ 0 ] >>> \"Ahmad\" names [ 2 ] >>> \"Ali\" Assignment names [ 2 ] = \"Reza\" >>> [ \"Ahmad\" , \"Mohammad\" , \"Reza\" , \"Hamed\" ] Length of Array len ( names ) >>> 4 len ( fruits ) >>> 4 Append names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] names . append ( \"Morteza\" ) print ( names ) >>> [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" , \"Morteza\" ] Multi Variant objs = [ 12 , \"Ahmad\" , 2.3 , True ] print ( objs ) >>> [ 12 , \"Ahmad\" , 2.3 , True ] Splite names = \"Ahmad Ali Reaza\" name_list = names . split () Concat String as an array","title":"Array"},{"location":"learning/12-simple%20array/#array","text":"","title":"Array"},{"location":"learning/12-simple%20array/#whats-array","text":"name1 = \"Ahmad\" name2 = \"Mohammad\" name3 = \"Ali\" name4 = \"blueberry\"","title":"what's array?"},{"location":"learning/12-simple%20array/#example","text":"names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] fruits = [ \"applae\" , \"orange\" , \"coconut\" , \"blueberry\" ]","title":"Example"},{"location":"learning/12-simple%20array/#print","text":"print ( names ) print ( fruits ) >>> [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] >>> [ \"applae\" , \"orange\" , \"coconut\" , \"blueberry\" ]","title":"Print"},{"location":"learning/12-simple%20array/#index","text":"names [ 0 ] >>> \"Ahmad\" names [ 2 ] >>> \"Ali\"","title":"Index"},{"location":"learning/12-simple%20array/#assignment","text":"names [ 2 ] = \"Reza\" >>> [ \"Ahmad\" , \"Mohammad\" , \"Reza\" , \"Hamed\" ]","title":"Assignment"},{"location":"learning/12-simple%20array/#length-of-array","text":"len ( names ) >>> 4 len ( fruits ) >>> 4","title":"Length of Array"},{"location":"learning/12-simple%20array/#append","text":"names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] names . append ( \"Morteza\" ) print ( names ) >>> [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" , \"Morteza\" ]","title":"Append"},{"location":"learning/12-simple%20array/#multi-variant","text":"objs = [ 12 , \"Ahmad\" , 2.3 , True ] print ( objs ) >>> [ 12 , \"Ahmad\" , 2.3 , True ]","title":"Multi Variant"},{"location":"learning/12-simple%20array/#splite","text":"names = \"Ahmad Ali Reaza\" name_list = names . split ()","title":"Splite"},{"location":"learning/12-simple%20array/#concat","text":"","title":"Concat"},{"location":"learning/12-simple%20array/#string-as-an-array","text":"","title":"String as an array"},{"location":"learning/13-for%20loop/","text":"For Loop Flowchart Simple For Loop names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] for name in names : print ( name ) for name in names : if name . startwith ( \"A\" ): print ( name ) Break for name in names : if name . startwith ( \"M\" ): break Continue for name in names : if name . startwith ( \"M\" ): continue else : print ( name ) Range for i in nums : print ( i ) for i in range ( 12 ): print ( i ) for i in range ( 6 , 12 , 2 ): print ( i ) Excersize [ ] Sum of 1 to 100 [ ] Mean of list of numbers [ ] \u0628\u200c\u0645\u200c\u0645 , \u06a9\u200c\u0645\u200c\u0645 [ ] Sum of Digits [ ] number of Digits [ ] Fibbonachi [ ] number reverse [ ] \u062a\u062c\u0632\u06cc\u0647 \u0639\u062f\u062f [ ] \u062a\u0627\u06cc\u0645\u0631 [ ] \u0637\u0648\u0644\u0627\u0646\u06cc \u062a\u0631\u06cc\u0646 \u06a9\u0644\u0645\u0647 For in For ## For in For ```python [ ] \u0686\u0627\u067e \u0645\u062b\u0644\u062b [ ] \u0686\u0627\u067e \u0644\u0648\u0632\u06cc [ ] \u0633\u0627\u0639\u062a \u062f\u06cc\u062c\u06cc\u062a\u0627\u0644","title":"For Loop"},{"location":"learning/13-for%20loop/#for-loop","text":"","title":"For Loop"},{"location":"learning/13-for%20loop/#flowchart","text":"","title":"Flowchart"},{"location":"learning/13-for%20loop/#simple-for-loop","text":"names = [ \"Ahmad\" , \"Mohammad\" , \"Ali\" , \"Hamed\" ] for name in names : print ( name ) for name in names : if name . startwith ( \"A\" ): print ( name )","title":"Simple For Loop"},{"location":"learning/13-for%20loop/#break","text":"for name in names : if name . startwith ( \"M\" ): break","title":"Break"},{"location":"learning/13-for%20loop/#continue","text":"for name in names : if name . startwith ( \"M\" ): continue else : print ( name )","title":"Continue"},{"location":"learning/13-for%20loop/#range","text":"for i in nums : print ( i ) for i in range ( 12 ): print ( i ) for i in range ( 6 , 12 , 2 ): print ( i )","title":"Range"},{"location":"learning/13-for%20loop/#excersize","text":"[ ] Sum of 1 to 100 [ ] Mean of list of numbers [ ] \u0628\u200c\u0645\u200c\u0645 , \u06a9\u200c\u0645\u200c\u0645 [ ] Sum of Digits [ ] number of Digits [ ] Fibbonachi [ ] number reverse [ ] \u062a\u062c\u0632\u06cc\u0647 \u0639\u062f\u062f [ ] \u062a\u0627\u06cc\u0645\u0631 [ ] \u0637\u0648\u0644\u0627\u0646\u06cc \u062a\u0631\u06cc\u0646 \u06a9\u0644\u0645\u0647","title":"Excersize"},{"location":"learning/13-for%20loop/#for-in-for","text":"## For in For ```python [ ] \u0686\u0627\u067e \u0645\u062b\u0644\u062b [ ] \u0686\u0627\u067e \u0644\u0648\u0632\u06cc [ ] \u0633\u0627\u0639\u062a \u062f\u06cc\u062c\u06cc\u062a\u0627\u0644","title":"For in For"},{"location":"learning/14-while%20loop/","text":"While Loop for unknown len Flowchart Simple While i = 1 while i < 6 : print ( i ) i += 1 Continue i = 0 while i < 6 : i += 1 if i == 3 : continue print ( i ) Break i = 1 while i < 6 : print ( i ) if i == 3 : break i += 1 Do While While True","title":"While Loop"},{"location":"learning/14-while%20loop/#while-loop","text":"for unknown len","title":"While Loop"},{"location":"learning/14-while%20loop/#flowchart","text":"","title":"Flowchart"},{"location":"learning/14-while%20loop/#simple-while","text":"i = 1 while i < 6 : print ( i ) i += 1","title":"Simple While"},{"location":"learning/14-while%20loop/#continue","text":"i = 0 while i < 6 : i += 1 if i == 3 : continue print ( i )","title":"Continue"},{"location":"learning/14-while%20loop/#break","text":"i = 1 while i < 6 : print ( i ) if i == 3 : break i += 1","title":"Break"},{"location":"learning/14-while%20loop/#do-while","text":"","title":"Do While"},{"location":"learning/14-while%20loop/#while-true","text":"","title":"While True"},{"location":"learning/15-functions/","text":"Function Simple functions define: def my_function (): print ( \"Hello from a function\" ) call: my_function () Argument def my_function ( first_name ): print ( fname + \" is 22 years old\" ) my_function ( \"Ahmad\" ) my_function ( \"Ali\" ) my_function ( \"Hamed\" ) Multi Argument def my_function ( first_name , last_name ): print ( \"I am \" , first_name + \" \" + last_name ) my_function ( \"Ahmad\" , \"Sharifian\" ) Return Values def my_function ( x ): return 5 * x print ( my_function ( 3 )) print ( my_function ( 5 )) print ( my_function ( 9 )) Pass not define func def myfunction (): pass","title":"Function"},{"location":"learning/15-functions/#function","text":"","title":"Function"},{"location":"learning/15-functions/#simple-functions","text":"define: def my_function (): print ( \"Hello from a function\" ) call: my_function ()","title":"Simple functions"},{"location":"learning/15-functions/#argument","text":"","title":"Argument"},{"location":"learning/15-functions/#def-my_functionfirst_name-printfname-is-22-years-old-my_functionahmad-my_functionali-my_functionhamed","text":"","title":"def\u00a0my_function(first_name):  \n\u00a0\u00a0print(fname +\u00a0&quot; is 22 years old&quot;)  \n\nmy_function(&quot;Ahmad&quot;)  \nmy_function(&quot;Ali&quot;)\nmy_function(&quot;Hamed&quot;)\n"},{"location":"learning/15-functions/#multi-argument","text":"","title":"Multi Argument"},{"location":"learning/15-functions/#def-my_functionfirst_name-last_name-printi-am-first_name-last_name-my_functionahmad-sharifian","text":"","title":"def\u00a0my_function(first_name, last_name):  \n\u00a0\u00a0print(&quot;I am &quot;, first_name +\u00a0&quot; &quot;\u00a0+ last_name)  \n\nmy_function(&quot;Ahmad&quot;,\u00a0&quot;Sharifian&quot;)\n"},{"location":"learning/15-functions/#return-values","text":"","title":"Return Values"},{"location":"learning/15-functions/#def-my_functionx-return-5-x-printmy_function3-printmy_function5-printmy_function9","text":"","title":"def\u00a0my_function(x):  \n    return\u00a05\u00a0* x  \n\nprint(my_function(3))  \nprint(my_function(5))  \nprint(my_function(9))\n"},{"location":"learning/15-functions/#pass","text":"not define func def myfunction (): pass","title":"Pass"},{"location":"learning/16-data%20structure/","text":"Data Structure Array Exampls fruits = [ \"Apple\" , \"Orange\" , \"Benanana\" ] Tuple but mutable # Define fruits = ( \"Apple\" , \"Orange\" , \"Bananana\" ) # Lentgh print ( len ( fruits )) # Read print ( fruits [ 0 ]) # Assigngit! fruits [ 1 ] = \"Watermelone\" Set same as math names = { \"Ahmad\" , \"Ali\" , \"Hamed\" } non ordered print ( names [ 0 ]) names [ 1 ] = \"Mohammad\" non-repetitive names = { \"Ahmad\" , \"Ali\" , \"Hamed\" , \"Ali\" } print ( names ) >> names = { \"Ahmad\" , \"Ali\" , \"Hamed\" } dictionary Like dictionary in real world Example person = { \"first_name\" : \"Ahmad\" , \"last_name\" : \"Sharifianzade\" , \"Age\" : 30 , } print ( person ) print ( person [ \"last_name\" ]) person [ 'Age' ] = 45","title":"Data Structure"},{"location":"learning/16-data%20structure/#data-structure","text":"","title":"Data Structure"},{"location":"learning/16-data%20structure/#array","text":"Exampls fruits = [ \"Apple\" , \"Orange\" , \"Benanana\" ]","title":"Array"},{"location":"learning/16-data%20structure/#tuple","text":"but mutable # Define fruits = ( \"Apple\" , \"Orange\" , \"Bananana\" ) # Lentgh print ( len ( fruits )) # Read print ( fruits [ 0 ]) # Assigngit! fruits [ 1 ] = \"Watermelone\"","title":"Tuple"},{"location":"learning/16-data%20structure/#set","text":"same as math names = { \"Ahmad\" , \"Ali\" , \"Hamed\" } non ordered print ( names [ 0 ]) names [ 1 ] = \"Mohammad\" non-repetitive names = { \"Ahmad\" , \"Ali\" , \"Hamed\" , \"Ali\" } print ( names ) >> names = { \"Ahmad\" , \"Ali\" , \"Hamed\" }","title":"Set"},{"location":"learning/16-data%20structure/#dictionary","text":"Like dictionary in real world Example person = { \"first_name\" : \"Ahmad\" , \"last_name\" : \"Sharifianzade\" , \"Age\" : 30 , } print ( person ) print ( person [ \"last_name\" ]) person [ 'Age' ] = 45","title":"dictionary"},{"location":"learning/20-file/","text":"File Raw txt Openning mode \"r\" - Read - Default value. Opens a file for reading, error if the file does not exist \"a\" - Append - Opens a file for appending, creates the file if it does not exist \"w\" - Write - Opens a file for writing, creates the file if it does not exist \"x\" - Create - Creates the specified file, returns an error if the file exists Open file file = open ( \"demofile.txt\" , \"r\" ) print ( file . read ()) Json Load json import json # some JSON: x = '{ \"name\":\"Ahmad\", \"age\":30, \"city\":\"Tehran\"}' # parse x: y = json . loads ( x ) # the result is a Python dictionary: print ( y [ \"age\" ]) Dump json import json # a Python object (dict): x = { \"name\" : \"Ahmad\" , \"age\" : 30 , \"city\" : \"Tehran\" } # convert into JSON: y = json . dumps ( x ) # the result is a JSON string: print ( y ) With file import json # a Python object (dict): x = { \"name\" : \"Ahmad\" , \"age\" : 30 , \"city\" : \"Tehran\" } outfile = open ( \"sample.json\" , \"w\" ) # save on file y = json . dump ( x , outfile ) Pickle Python Pickle is used to serialize and deserialize a python object structure. ...","title":"File"},{"location":"learning/20-file/#file","text":"","title":"File"},{"location":"learning/20-file/#raw-txt","text":"","title":"Raw txt"},{"location":"learning/20-file/#openning-mode","text":"\"r\" - Read - Default value. Opens a file for reading, error if the file does not exist \"a\" - Append - Opens a file for appending, creates the file if it does not exist \"w\" - Write - Opens a file for writing, creates the file if it does not exist \"x\" - Create - Creates the specified file, returns an error if the file exists","title":"Openning mode"},{"location":"learning/20-file/#open-file","text":"file = open ( \"demofile.txt\" , \"r\" ) print ( file . read ())","title":"Open file"},{"location":"learning/20-file/#json","text":"","title":"Json"},{"location":"learning/20-file/#load-json","text":"import json # some JSON: x = '{ \"name\":\"Ahmad\", \"age\":30, \"city\":\"Tehran\"}' # parse x: y = json . loads ( x ) # the result is a Python dictionary: print ( y [ \"age\" ])","title":"Load json"},{"location":"learning/20-file/#dump-json","text":"import json # a Python object (dict): x = { \"name\" : \"Ahmad\" , \"age\" : 30 , \"city\" : \"Tehran\" } # convert into JSON: y = json . dumps ( x ) # the result is a JSON string: print ( y )","title":"Dump json"},{"location":"learning/20-file/#with-file","text":"import json # a Python object (dict): x = { \"name\" : \"Ahmad\" , \"age\" : 30 , \"city\" : \"Tehran\" } outfile = open ( \"sample.json\" , \"w\" ) # save on file y = json . dump ( x , outfile )","title":"With file"},{"location":"learning/20-file/#pickle","text":"Python Pickle is used to serialize and deserialize a python object structure. ...","title":"Pickle"},{"location":"learning/21-module%20and%20package/","text":"Module and Packages Module Define Save this code in a file named mymodule.py def greeting ( name ): print ( \"Hello, \" + name ) use this code in file named main.py import mymodule mymodule . greeting ( \"Ahmad\" ) Naming import mymodule as module1 module1 . greeting ( \"Ahmad\" ) Import func from module from mymodule import greeting Python Pickle is used to serialize and deserialize a python object structure . greeting ( \"Ahmad\" ) Package mod1.py def foo (): print ( '[mod1] foo()' ) class Foo : pass mod2.py def bar (): print ( '[mod2] bar()' ) class Bar : pass usage import pkg.mod1 , pkg.mod2 pkg . mod1 . foo () x = pkg . mod2 . Bar () print ( x ) or from pkg.mod2 import Bar as Qux x = Qus () print ( x ) Big package ```","title":"Module and Packages"},{"location":"learning/21-module%20and%20package/#module-and-packages","text":"","title":"Module and Packages"},{"location":"learning/21-module%20and%20package/#module","text":"","title":"Module"},{"location":"learning/21-module%20and%20package/#define","text":"Save this code in a file named mymodule.py def greeting ( name ): print ( \"Hello, \" + name ) use this code in file named main.py import mymodule mymodule . greeting ( \"Ahmad\" )","title":"Define"},{"location":"learning/21-module%20and%20package/#naming","text":"import mymodule as module1 module1 . greeting ( \"Ahmad\" )","title":"Naming"},{"location":"learning/21-module%20and%20package/#import-func-from-module","text":"from mymodule import greeting Python Pickle is used to serialize and deserialize a python object structure . greeting ( \"Ahmad\" )","title":"Import func from module"},{"location":"learning/21-module%20and%20package/#package","text":"","title":"Package"},{"location":"learning/21-module%20and%20package/#mod1py","text":"def foo (): print ( '[mod1] foo()' ) class Foo : pass","title":"mod1.py"},{"location":"learning/21-module%20and%20package/#mod2py","text":"def bar (): print ( '[mod2] bar()' ) class Bar : pass","title":"mod2.py"},{"location":"learning/21-module%20and%20package/#usage","text":"import pkg.mod1 , pkg.mod2 pkg . mod1 . foo () x = pkg . mod2 . Bar () print ( x ) or from pkg.mod2 import Bar as Qux x = Qus () print ( x )","title":"usage"},{"location":"learning/21-module%20and%20package/#big-package","text":"```","title":"Big package"}]}